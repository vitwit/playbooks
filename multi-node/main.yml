---
- name: Create fullnode Droplets
  hosts: localhost
  tasks:
    - name: Get DigitalOcean SSH Key ID
      uri:
        url: "https://api.digitalocean.com/v2/account/keys"
        method: GET
        headers:
          Authorization: "Bearer {{ digital_ocean_api_token }}"
        return_content: yes
      register: ssh_key_response

    - name: Debug SSH Key Response
      debug:
        var: ssh_key_response

    - name: Parse SSH Key ID
      set_fact:
        ssh_key_id: "{{ (ssh_key_response.json | json_query(query)) | first }}"
      vars:
        query: "ssh_keys[?name=='{{ ssh_key_name }}'].id"

    - name: Read file contents
      slurp:
        src: "{{ ssh_file_path }}"
      register: ssh_content   

    - name: Store SSH key contents into a variable
      set_fact:
        ssh_key_variable: "{{ ssh_content['content'] | b64decode }}"     

    - name: Create full node  Droplet
      digital_ocean_droplet:
        state: present
        name: "fullnode{{ item }}"
        size: s-2vcpu-4gb
        image: ubuntu-22-04-x64
        region: "{{ region }}"
        ssh_keys: "{{ ssh_key_id }}"
        monitoring: false
        ipv6: false
        user_data: |
          #cloud-config
          users:
            - name: {{ user }}
              groups: sudo
              sudo: "ALL=(ALL) NOPASSWD:ALL"
              shell: /bin/bash
              ssh-authorized-keys:
                - {{ ssh_key_variable  }}
        api_token: "{{ digital_ocean_api_token }}"
      with_sequence: start=0 end={{ fullnode_count-1 }}
      register: do1
    
    - name: Extract IP addresses
      set_fact:
        droplet_ids: "{{ do1.results | json_query('[].data.droplet.id') | flatten }}"
        ip_addresses: "{{ do1.results | json_query('[].data.droplet.networks.v4[0].ip_address') | flatten }}"

    - name: Reverse IP addresses list
      set_fact:
        reversed_ip_addresses: "{{ ip_addresses | zip(range(fullnode_count)) | list | reverse }}"

    - name: Append IP addresses to .inventory file under [fullnodes]
      lineinfile:
        path: "inventory.ini"
        insertafter: "^\\[fullnodes\\]"
        line: "fullnode{{ item.1 }} ansible_host={{ item.0 }} ansible_user={{ user }}"
      loop: "{{ reversed_ip_addresses }}"
      loop_control:
        label: "{{ item[0] }}"

    - name: Create validator  node  Droplets
      digital_ocean_droplet:
        state: present
        name: "validator{{ item }}"
        size: s-2vcpu-4gb
        image: ubuntu-22-04-x64
        region: "{{ region }}"
        ssh_keys: "{{ ssh_key_id }}"
        monitoring: false
        ipv6: false
        user_data: |
          #cloud-config
          users:
            - name: {{ user }}
              groups: sudo
              sudo: "ALL=(ALL) NOPASSWD:ALL"
              shell: /bin/bash
              ssh-authorized-keys:
                - {{ ssh_key_variable  }}
        api_token: "{{ digital_ocean_api_token }}"
      with_sequence: start=0 end={{ validators_count-1 }}
      register: do2 

    - name: Extract IP addresses
      set_fact:        
        ip_addresses1: "{{ do2.results | json_query('[].data.droplet.networks.v4[0].ip_address') | flatten }}"

    - name: Reverse IP addresses list
      set_fact:
        reversed_ip_addresses1: "{{ ip_addresses1| zip(range(validators_count)) | list | reverse }}"
    - name: Debug the user dir
      debug:
        msg: "User Directory: {{ reversed_ip_addresses1 }}"    

    - name: Append IP addresses to .inventory file under [validators]
      lineinfile:
        path: "inventory.ini"
        insertafter: "^\\[validators\\]"
        line: "validator{{ item.1 }} ansible_host={{ item.0 }} ansible_user={{ user }}"
      loop: "{{ reversed_ip_addresses1 }}"
      loop_control:
        label: "{{ item[0] }}"

    - name: Disable host key checking
      set_fact:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: sleep for a few seconds
      command: sleep 20    
  
    - name: Add new fullnodes to inventory
      add_host:
        name: "fullnode{{ item.1 }}"
        ansible_host: "{{ item.0 }}"
        ansible_user: "{{ user }}"
        groups: fullnodes
      loop: "{{ ip_addresses | zip(range(fullnode_count)) | list }}"
      loop_control:
        label: "{{ item[0] }}"

    - name: Add new validators to inventory
      add_host:
        name: "validator{{ item.1 }}"
        ansible_host: "{{ item.0 }}"
        ansible_user: "{{ user }}"
        groups: validators
      loop: "{{ ip_addresses1 | zip(range(validators_count)) | list }}"
      loop_control:
        label: "{{ item[0] }}"  

- name: Installations
  hosts: validators:fullnodes
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  tasks:
    - name: sleep for a few seconds
      command: sleep 20 

    - name: Debug the user dir
      debug:
        msg: "User Directory: {{ user_home }}"

    - name: Download go tar file
      command: wget https://go.dev/dl/go{{go_version}}.linux-amd64.tar.gz
      become: true

    - name: Delete previous installation
      command: rm -rf /usr/local/go
      become: true

    - name: Extract and move new go folder to /usr/local
      command: tar -C /usr/local -xzf go{{go_version}}.linux-amd64.tar.gz
      become: true

    - name: Delete downloaded tar file
      shell: rm -rf go{{go_version}}.linux-amd64.tar.gz*
      become: true

    - name: Set Go environment variables in ~/.profile
      lineinfile:
        path: ~/.profile
        line: |
          export GOROOT=/usr/local/go 
          export GOPATH={{ user_home }}/go
          export GOBIN=$GOPATH/bin
          export PATH=$PATH:/usr/local/go/bin:$GOBIN
        create: true
        state: present

    - name: sleep for a few seconds
      command: sleep 15

    - name: Update apt package list
      become: true
      apt:
        update_cache: yes

    - name: sleep for a few seconds
      command: sleep 30

    - name: Install prerequisites
      become: true
      apt:
        name:
          - make
          - jq
          - gcc
        state: present

    - name: Debug the  dir
      debug:
        msg: "User Directory: {{ user_home }}"

    - name: Install the binary
      become: true
      block:
        - name: Clone the git repo
          git:
            repo: "{{ repo }}"
            dest: "{{ user_home }}/{{ network }}"
            version: "{{ node_version }}"
            update: yes
            force: yes

        - name: Install node
          command: "make install"
          args:
            chdir: "{{ user_home }}/{{ network }}"
          environment:
            PATH: "{{ path }}"
            GOPATH: "{{ user_home }}/go"

- name: Setup Validator Nodes 
  hosts: validator0
  tasks:
    - name: Initialize chain of each server
      command: "{{ daemon }} init {{ validator_name }}{{ item }} --chain-id {{ chain_id }} --home {{ user_home }}/{{ node_home }}{{ item }}"
      environment:
        PATH: "{{ path }}"
      loop: "{{ range(1, validators_count) | list }}"

    - name: Initialize chain on each server
      command: "{{ daemon }} init {{ fullnode_name }}{{ item }} --chain-id {{ chain_id }} --home {{ user_home }}/{{ node_home }}f{{ item }}"
      environment:
        PATH: "{{ path }}"
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Change denom to the required denom
      become: true
      shell: sed -i $SED_EXT 's/"stake"/"{{ denom }}"/' {{ user_home }}/{{ node_home }}{{ item }}/config/genesis.json
      loop: "{{ range(1, validators_count) | list }}"

    - name: Change denom to the required denom for full node
      become: true
      shell: sed -i $SED_EXT 's/"stake"/"{{ denom }}"/' {{ user_home }}/{{ node_home }}f{{ item }}/config/genesis.json
      loop: "{{ range(0, fullnode_count) | list }}"  

    - name: Replace voting_period value for validators
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}{{ item }}/config/genesis.json"
        regexp: '^(\s*)"voting_period":\s*".*?",'
        line: '"voting_period": "{{ voting_period }}",'
      loop: "{{ range(1, validators_count) | list }}"  

    - name: Replace voting_period value for fullnodes
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}f{{ item }}/config/genesis.json"
        regexp: '^(\s*)"voting_period":\s*".*?",'
        line: '"voting_period": "{{ voting_period }}",'
      loop: "{{ range(0, fullnode_count) | list }}"  

    - name: Replace expediated voting_period value for validators
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}{{ item }}/config/genesis.json"
        regexp: '^(\s*)"expedited_voting_period":\s*".*?",'
        line: '"expedited_voting_period": "{{ expedited_voting_period }}",'
      loop: "{{ range(1, validators_count) | list }}"

    - name: Replace expediated voting_period value for fullnodes
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}f{{ item }}/config/genesis.json"
        regexp: '^(\s*)"expedited_voting_period":\s*".*?",'
        line: '"expedited_voting_period": "{{ expedited_voting_period }}",'
      loop: "{{ range(0, fullnode_count) | list }}"  

    - name: Update "amount" value in the JSON file for Validators
      become: true
      shell: |
        jq '.app_state.gov.params.min_deposit[0].amount = "{{ min_deposit_value }}"' {{ user_home }}/{{ node_home }}{{ item }}/config/genesis.json > temp.json && mv temp.json {{ user_home }}/{{ node_home }}{{ item }}/config/genesis.json
      loop: "{{ range(1, validators_count) | list }}"

    - name: Update "amount" value in the JSON file for fullnodes
      become: true
      shell: |
        jq '.app_state.gov.params.min_deposit[0].amount = "{{ min_deposit_value }}"' {{ user_home }}/{{ node_home }}f{{ item }}/config/genesis.json > temp1.json && mv temp1.json {{ user_home }}/{{ node_home }}f{{ item }}/config/genesis.json
      loop: "{{ range(0, fullnode_count) | list }}"  
  
    - name: Add Keys for Validators
      command: "{{ daemon }} keys add {{ validator_key }} --keyring-backend test --home {{ user_home }}/{{ node_home }}{{ item }}"
      environment:
        PATH: "{{ path }}"
      loop: "{{ range(1, validators_count) | list }}"  

    - name: Add Keys for fullnodes
      command: "{{ daemon }} keys add {{ fullnode_key }}{{ item }} --keyring-backend test --home {{ user_home }}/{{ node_home }}f{{ item }}"
      environment:
        PATH: "{{ path }}"
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Add genesis account  for validators
      become: true
      command: "{{ daemon }} genesis add-genesis-account {{ validator_key }}  100000000000{{ denom }} --keyring-backend test --home {{ user_home }}/{{ node_home }}{{ item }}"
      environment:
        PATH: "{{ path }}"
      loop: "{{ range(1, validators_count) | list }}"  

    - name: Add genesis account for fullnodes
      become: true
      command: "{{ daemon }} genesis add-genesis-account {{ fullnode_key }}{{ item }}  100000000000{{ denom }} --keyring-backend test --home {{ user_home }}/{{ node_home }}f{{ item }}"
      environment:
        PATH: "{{ path }}"  
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Gentx Command 
      command: "{{ daemon }} genesis  gentx {{ validator_key }} 90000000000{{ denom }} --chain-id {{ chain_id }} --keyring-backend test --home {{ user_home }}/{{ node_home }}{{ item }}"
      environment:
        PATH: "{{ path }}"
      loop: "{{ range(1, validators_count) | list }}"  

    - name: Update minimum gas price for validators
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}{{ item }}/config/app.toml"
        regexp: "^minimum-gas-prices ="
        line: 'minimum-gas-prices = "{{ minimum_gas_price }}"'
        state: present
      loop: "{{ range(1, validators_count) | list }}" 

    - name: Update minimum gas price for fullnodes
      become: true
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}f{{ item }}/config/app.toml"
        regexp: "^minimum-gas-prices ="
        line: 'minimum-gas-prices = "{{ minimum_gas_price }}"'
        state: present
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Retrieve the validator address
      become: true
      shell: "{{ daemon }} keys show -a {{ validator_key }} --keyring-backend test --home {{ user_home }}/{{ node_home }}{{ item }}"
      register: validator_addresses
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"
      loop: "{{ range(1, validators_count) | list }}"

    - name: Retrieve the full node address
      become: true
      shell: "{{ daemon }} keys show -a {{ fullnode_key }}{{ item }} --keyring-backend test --home {{ user_home }}/{{ node_home }}f{{ item }}"
      register: fullnode_addresses
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Set fact for validator addresses
      set_fact:
        validator_addresses_dict: "{{ validator_addresses_dict | default({}) | combine({item.item: item.stdout}) }}"
      loop: "{{ validator_addresses.results }}"

    - name: Set fact for fullnode addresses
      set_fact:
        fullnode_addresses_dict: "{{ fullnode_addresses_dict | default({}) | combine({item.item: item.stdout}) }}"
      loop: "{{ fullnode_addresses.results }}"  

    - name: Initialize base validator
      command: "{{ daemon }} init {{ validator_name }} --chain-id {{ chain_id }} --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"

    - name: Change denom to the required denom
      become: true
      shell: sed -i $SED_EXT 's/"stake"/"{{ denom }}"/' {{ user_home }}/{{ node_home }}/config/genesis.json    

    - name: Add Keys
      command: "{{ daemon }} keys add {{ validator_key }} --keyring-backend test --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"

    - name: Add genesis account 
      become: true
      command: "{{ daemon }} genesis add-genesis-account {{ validator_key }}  100000000000{{ denom }} --keyring-backend test --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"
 
    - name: Add all other genesis accounts on main validator
      become: true
      command: "{{ daemon }} genesis add-genesis-account {{ item.value }} 100000000000{{ denom }} --keyring-backend test --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"
      loop: "{{ validator_addresses_dict | dict2items }}"

    - name: Add all other full node genesis accounts on main validator
      become: true
      command: "{{ daemon }} genesis add-genesis-account {{ item.value }} 100000000000{{ denom }} --keyring-backend test --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"
      loop: "{{ fullnode_addresses_dict | dict2items }}"  

    - name: Gentx Command 
      command: "{{ daemon }} genesis  gentx {{ validator_key }} 90000000000{{ denom }} --chain-id {{ chain_id }} --keyring-backend test --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"

    - name: Copy  other validator gentx file into the validator 1 gentx folder
      become: true
      shell: "sudo cp {{ user_home }}/{{ node_home }}{{ item }}/config/gentx/* {{ user_home }}/{{ node_home }}/config/gentx"   
      loop: "{{ range(1, validators_count) | list }}"  

    - name: Update minimum gas price on main validator
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}/config/app.toml"
        regexp: "^minimum-gas-prices ="
        line: 'minimum-gas-prices = "{{ minimum_gas_price }}"'
        state: present

    - name: Collect gentxs
      become: true
      command: "{{ daemon }} genesis  collect-gentxs --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"  

    - name: Fetch genesis.json from
      become: true
      fetch:
        src: "{{ node_home }}/config/genesis.json"
        dest: "{{ playbook_dir }}/genesis.json"
        flat: yes     

    - name: Setup cosmovisor for main validator
      become: true
      shell: "go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest &&  mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin && mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/upgrades && cp $GOPATH/bin/{{ daemon }} {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin/{{ daemon }}"
      environment:
        GOPATH: "{{ user_home }}/go"
        PATH: "{{ path }}"

    - name: Change ownership of cosmovisor directory
      become: true
      command: "chown -R {{ ansible_user }}:{{ ansible_user }} {{ user_home }}/{{ node_home }}/cosmovisor"

    - name: Compress other validators binary directories
      become: true
      archive:
        path: "{{ user_home }}/{{ node_home }}{{ item }}"
        dest: "{{ user_home }}/{{ node_home }}{{ item }}.tar.gz" 
      loop: "{{ range(1, validators_count) | list }}"  

    - name: Fetch binaries for validators
      become: true
      fetch:
        src: "{{ user_home }}/{{ node_home }}{{ item }}.tar.gz"
        dest: "{{ playbook_dir }}/{{ node_home }}{{ item }}.tar.gz"
        flat: yes  
      loop: "{{ range(1, validators_count) | list }}" 

    - name: Compress other fullnode binary directories
      become: true
      archive:
        path: "{{ user_home }}/{{ node_home }}f{{ item }}"
        dest: "{{ user_home }}/{{ node_home }}f{{ item }}.tar.gz" 
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Fetch binaries for fullnodes
      become: true
      fetch:
        src: "{{ user_home }}/{{ node_home }}f{{ item }}.tar.gz"
        dest: "{{ playbook_dir }}/{{ node_home }}f{{ item }}.tar.gz"
        flat: yes  
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Remove the fullnode tar files
      become: true
      command: rm -rf {{ node_home }}f{{ item }}.tar.gz  
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Remove the validator tar files
      become: true
      command: rm -rf {{ node_home }}{{ item }}.tar.gz 
      loop: "{{ range(1, validators_count) | list }}" 

    - name: Remove the  other validator  files
      become: true
      command: rm -rf {{ node_home }}{{ item }}
      loop: "{{ range(1, validators_count) | list }}"   

- name: Copying the binaries to their respective servers 
  hosts: validators
  vars: 
    validator0_ip: "{{ hostvars['validator0']['ansible_host'] }}"
    validator1_ip: "{{ hostvars['validator1']['ansible_host'] }}"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"  
  tasks:
    - name: Send the binaries to respective  validators server
      copy:
        src: "{{ playbook_dir }}/{{ node_home }}{{ item }}.tar.gz"
        dest: "{{ user_home }}/{{ node_home }}.tar.gz"
      loop: "{{ range(1, validators_count) | list }}"
      when: "inventory_hostname == groups['validators'][item]"   
    
    - name: Unarchive the binary file
      become: true
      unarchive:
        src: "{{ user_home }}/{{ node_home }}.tar.gz"
        dest: "{{ user_home }}" 
        remote_src: yes 
      loop: "{{ range(1, validators_count) | list }}"
      when: "inventory_hostname == groups['validators'][item]"  

    - name: Move binaries 
      become: true
      command: mv {{ node_home }}{{ item }}  {{ node_home }}
      loop: "{{ range(1, validators_count) | list }}"
      when: "inventory_hostname == groups['validators'][item]"

    - name: Replace the existing genesis.json
      become: true
      copy:
        src: "{{ playbook_dir }}/genesis.json"
        dest: "{{ user_home }}/{{ node_home }}/config/genesis.json" 
      loop: "{{ range(1, validators_count) | list }}"   

    - name: Setup cosmovisor for validators
      become: true
      shell: "go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest &&  mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin && mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/upgrades && cp $GOPATH/bin/{{ daemon }} {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin/{{ daemon }}"
      environment:
        GOPATH: "{{ user_home }}/go"
        PATH: "{{ path }}"
      loop: "{{ range(1, validators_count) | list }}"

    - name: Change ownership of cosmovisor directory
      become: true
      command: "chown -R {{ ansible_user }}:{{ ansible_user }} {{ user_home }}/{{ node_home }}/cosmovisor"
      loop: "{{ range(1, validators_count) | list }}"

    - name: Extract node-id for all  validators
      become: true
      shell: "{{ daemon }} tendermint show-node-id"
      register: node_ids
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"    
      loop: "{{ range(0, 2) | list }}"  

    - name: Set fact for node-id  addresses
      set_fact:
        node_ids_dict: "{{ node_ids_dict | default({}) | combine({item.item : item.stdout}) }}"
      loop: "{{ node_ids.results }}"
    
    - name: Debug node id 0
      debug: 
        var: node_ids_dict[0]
    - name: Debug node id 1
      debug: 
        var: node_ids_dict[1]   

    - name: Add persistant  peer for validator nodes
      become: true
      lineinfile:
        path: "{{ node_home }}/config/config.toml"
        regexp: "^persistent_peers ="
        line: 'persistent_peers = "{{ hostvars["validator0"]["node_ids_dict"][0] }}@{{ validator0_ip }}:26656,{{ hostvars["validator1"]["node_ids_dict"][1] }}@{{ validator1_ip }}:26656"'
      loop: "{{ range(0, validators_count) | list }}"
 
    - name: Copy the service file
      become: true
      template:
        src: "{{ playbook_dir }}/templates/node-service.j2"
        dest: "/etc/systemd/system/{{ network }}.service"
        owner: root
        group: root
        mode: "0644"

    - name: Start the service file
      become: true
      systemd:
        name: "{{ network }}"
        state: started
        enabled: yes

    - name: Restart the journald service file
      become: true
      shell: systemctl restart systemd-journald.service 

    - name: Extract persistent_peers from config.toml
      shell: grep '^persistent_peers =' {{ node_home }}/config/config.toml | head -n 1
      register: persistent_peers_content
      run_once: true

    - name: Save persistent_peers to a file on the remote host
      copy:
        content: "{{ persistent_peers_content.stdout }}"
        dest: "{{ user_home }}/persistent_peers.txt"
      run_once: true  

    - name: Fetch persistent_peers file to the control node
      fetch:
        src: "{{ user_home }}/persistent_peers.txt"
        dest: "{{ playbook_dir }}/persistent_peers.txt"
        flat: yes
      run_once: true

    - name: remove tar files
      become: true
      command: rm -rf {{ node_home }}.tar.gz  

- name: Copy the binaries to the other  full nodes
  hosts: fullnodes
  vars: 
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
    validator0_ip: "{{ hostvars['validator0']['ansible_host'] }}"
    validator1_ip: "{{ hostvars['validator1']['ansible_host'] }}"
  tasks:
    - name: Send the binaries to respective  fullnode server
      copy:
        src: "{{ playbook_dir }}/{{ node_home }}f{{ item }}.tar.gz"
        dest: "{{ user_home }}/{{ node_home }}.tar.gz"
      loop: "{{ range(0, fullnode_count) | list }}"
      when: "inventory_hostname == groups['fullnodes'][item]"   
    
    - name: Unarchive the binary.gz file
      become: true
      unarchive:
        src: "{{ user_home }}/{{ node_home }}.tar.gz"
        dest: "{{ user_home }}" 
        remote_src: yes 
      loop: "{{ range(0, fullnode_count) | list }}"
      when: "inventory_hostname == groups['fullnodes'][item]"  

    - name: Move binaries
      become: true
      command: mv {{ node_home }}f{{ item }}  {{ node_home }}
      loop: "{{ range(0, fullnode_count) | list }}"
      when: "inventory_hostname == groups['fullnodes'][item]"

    - name: Replace the existing genesis.json
      become: true
      copy:
        src: "{{ playbook_dir }}/genesis.json"
        dest: "{{ user_home }}/{{ node_home }}/config/genesis.json" 
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Make rpc publicly accessible
      become: true
      lineinfile:
        path: "{{ node_home }}/config/config.toml"
        regexp: 'laddr = "tcp://127.0.0.1:26657"'
        line: 'laddr = "tcp://0.0.0.0:26657"'  

    - name: replace localhost under api section
      become: true
      replace:
        path: "{{ node_home }}/config/app.toml"
        regexp: 'address = "tcp://localhost:1317"'
        replace: 'address = "tcp://0.0.0.0:1317"'  

    - name: Making the change in the CORS section of config.toml
      become: true
      lineinfile:
        path: "{{ node_home }}/config/config.toml"
        regexp: 'cors_allowed_origins = \[\]'
        line: 'cors_allowed_origins = ["*"]'

    - name: Making the change in the CORS section of app.toml
      become: true
      lineinfile:
        path: "{{ node_home }}/config/app.toml"
        regexp: "enabled-unsafe-cors = false"
        line: "enabled-unsafe-cors = true"

    - name: set enable to true under api section
      become: true
      replace:
        path: "{{ node_home }}/config/app.toml"
        regexp: '(?ms)(\[api\][^\[]*enable\s*=\s*)false'
        replace: '\1true'       

    - name: Setup cosmovisor for fullnodes
      become: true
      shell: "go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest &&  mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin && mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/upgrades && cp $GOPATH/bin/{{ daemon }} {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin/{{ daemon }}"
      environment:
        GOPATH: "{{ user_home }}/go"
        PATH: "{{ path }}"
      loop: "{{ range(0, fullnode_count) | list }}"
      when: "inventory_hostname == groups['fullnodes'][item]"  

    - name: Change ownership of cosmovisor directory
      become: true
      command: "chown -R {{ ansible_user }}:{{ ansible_user }} {{ user_home }}/{{ node_home }}/cosmovisor"
      loop: "{{ range(0, fullnode_count) | list }}" 
      when: "inventory_hostname == groups['fullnodes'][item]"  

    - name: Replace persistent_peers in config.toml with the extracted content
      replace:
        path: "{{ node_home }}/config/config.toml"
        regexp: '^persistent_peers\s*=.*'
        replace: "{{ lookup('file', '{{ playbook_dir }}/persistent_peers.txt') }}"

    - name: Copy the service file
      become: true
      template:
        src: "{{ playbook_dir }}/templates/node-service.j2"
        dest: "/etc/systemd/system/{{ network }}.service"
        owner: root
        group: root
        mode: "0644"
      loop: "{{ range(0, fullnode_count) | list }}"
      when: "inventory_hostname == groups['fullnodes'][item]"  
   
    - name: Start the service file
      become: true
      systemd:
        name: "{{ network }}"
        state: started
        enabled: yes
      loop: "{{ range(0, fullnode_count) | list }}"
      when: "inventory_hostname == groups['fullnodes'][item]"  

    - name: Restart the journald service file
      become: true
      shell: systemctl restart systemd-journald.service 
      loop: "{{ range(0, fullnode_count) | list }}"
      when: "inventory_hostname == groups['fullnodes'][item]" 

    - name: remove tar files
      become: true
      command: rm -rf {{ node_home }}.tar.gz
        
- name: Load Balancer Setup
  hosts: fullnodes
  tasks:    
    - name: Debug droplet IDs
      debug:
        var: hostvars['localhost']['droplet_ids']

    - name: Create load balancer
      community.digitalocean.digital_ocean_load_balancer:
        api_token: "{{ digital_ocean_api_token }}"
        state: present
        name: load-balancer-RPC
        region: "{{ region }}"
        forwarding_rules:
          - entry_protocol: http
            entry_port: 80
            target_protocol: http
            target_port: 26657 
        droplet_ids: "{{ hostvars['localhost']['droplet_ids'] }}"
        health_check:
          protocol: "http"         
          port: 26657               
          path: "/status"           
          check_interval_seconds: 10
          response_timeout_seconds: 5
          healthy_threshold: 5
          unhealthy_threshold: 3
      register: rpc_lb_addr    
      run_once: true  

    - name: Wait for load balancer to become ready
      wait_for:
        timeout: 30
      run_once: true  
  
    - name: Get load balancer information by ID
      community.digitalocean.digital_ocean_load_balancer_info:
        oauth_token: "{{ digital_ocean_api_token }}"
        load_balancer_id: "{{ rpc_lb_addr.data.load_balancer.id }}"
      register: rpc_lb_info

    - name: Debug the contents of rpc_lb_info
      debug:
        var: rpc_lb_info  
    - name: Show Load Balancer IP address
      debug:
        msg: "Load Balancer IP: {{ rpc_lb_info.data[0].ip if rpc_lb_info.data[0].ip is defined else 'IP not available yet' }}"

    - name: Set lb1 variable to the RPC load balancer IP address
      set_fact:
        lb1: "{{ rpc_lb_info.data[0].ip }}"
      run_once: true    

    - name: Append RPC load balancer IP address under [loadbalancer] in the inventory file
      lineinfile:
        path: "inventory.ini"
        insertafter: "^\\[loadbalancer\\]"
        line: "lb1 ansible_host={{ lb1 }}"
      run_once: true
      delegate_to: localhost
  
    - name: Create load balancer for API endpoint
      community.digitalocean.digital_ocean_load_balancer:
        api_token: "{{ digital_ocean_api_token }}"
        state: present
        name: load-balancer-API
        region: "{{ region }}"
        forwarding_rules:
          - entry_protocol: http
            entry_port: 80
            target_protocol: http
            target_port: 1317  
        droplet_ids: "{{ hostvars['localhost']['droplet_ids'] }}"
        health_check:
          protocol: "http"         
          port: 1317               
          path: "/cosmos/base/tendermint/v1beta1/node_info"           
          check_interval_seconds: 10
          response_timeout_seconds: 5
          healthy_threshold: 5
          unhealthy_threshold: 3
      register: api_lb_addr     
      run_once: true  
    - name: Wait for load balancer to become ready
      wait_for:
        timeout: 30
      run_once: true  

    - name: Get load balancer information by ID
      community.digitalocean.digital_ocean_load_balancer_info:
        oauth_token: "{{ digital_ocean_api_token }}"
        load_balancer_id: "{{ api_lb_addr.data.load_balancer.id }}"
      register: api_info

    - name: Show Load Balancer IP address
      debug:
        msg: "Load Balancer IP: {{ api_info.data[0].ip if api_info.data[0].ip is defined else 'IP not available yet' }}"
   
    - name: Set lb2 variable to the API load balancer IP address
      set_fact:
        lb2: "{{ api_info.data[0].ip }}"
      run_once: true  

    - name: Append API load balancer IP address under [loadbalancer] in the inventory file
      lineinfile:
        path: "inventory.ini"
        insertafter: "^\\[loadbalancer\\]"
        line: "lb2 ansible_host={{ lb2 }}"
      run_once: true  
      delegate_to: localhost
   
    - name: Install nvm
      shell: >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash &&
        export NVM_DIR="{{ user_home }}/.nvm" &&
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" &&
        [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
      args:
        executable: /bin/bash

    - name: Install Node.js
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" &&
        nvm install v18.19.0
      environment:
        NVM_DIR: "{{ user_home }}/.nvm"
        PATH: "{{ user_home }}/.nvm/versions/node/v18.19.0/bin:{{ ansible_env.PATH }}"
      become: yes

    - name: Update global PATH
      lineinfile:
        path: /etc/environment
        line: 'PATH="{{ user_home }}/.nvm/versions/node/v18.19.0/bin:{{ ansible_env.PATH }}"'
      become: yes

    - name: Install npm
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" &&
        nvm install-latest-npm
      environment:
        NVM_DIR: "{{ user_home }}/.nvm"
        PATH: "{{ user_home }}/.nvm/versions/node/v18.19.0/bin:{{ ansible_env.PATH }}"

    - name: Install yarn
      become: true
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" &&
        npm install --global --unsafe-perm=true yarn
      environment:
        NVM_DIR: "{{ user_home }}/.nvm"
        PATH: "{{ user_home }}/.nvm/versions/node/v18.19.0/bin:{{ ansible_env.PATH }}"

    - name: Install ping_explorer
      become: true
      git:
        repo: "{{ ping_repo }}"
        dest: "{{ user_home }}/explorer"
        version: "f35fb4485630a6d80a9246f29e753e9e75fefbd3"

    - name: Install nginx
      become: true
      shell: sudo apt install -y nginx

    - name: move into the mainnet and remove the other files
      shell: rm -rf *
      args:
        chdir: "{{ user_home }}/explorer/chains/mainnet"
      become: yes

    - name: Copy the sample json file
      become: true
      template:
        src: "{{ playbook_dir }}/templates/explorer-config.j2"
        dest: "{{ user_home }}/explorer/chains/mainnet/{{ chain_id }}.json"
      vars:
        lb1_ip: "{{ lb1 }}"
        lb2_ip: "{{ lb2 }}"
     
    - name: Remove contents of /var/www/html
      become: true
      shell: rm -rf *
      args:
        chdir: "/var/www/html/"

    - name: Debug PATH
      ansible.builtin.debug:
        var: ansible_env.PATH
    - name: Build the explorer
      become: true
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" && export PATH="{{ ansible_env.PATH }}:{{ user_home }}/.nvm/versions/node/v18.19.0/bin" && cd '{{ user_home }}/explorer' && yarn install --ignore-engines && yarn build
      args:
        chdir: "{{ user_home }}/explorer"

    - name: Move the data inside dist folder to /var/www/html
      become: true
      shell: cp -r dist/* /var/www/html/
      args:
        chdir: "{{ user_home }}/explorer"

    - name: Install the faucet
      become: true
      shell: git clone https://github.com/vitwit/ping-faucet.git faucet && cd faucet && git checkout multi-chains
      args:
        chdir: "{{ user_home }}"

    - name: Remove existing config.js file
      become: true
      shell: rm -f config.js
      args:
        chdir: "{{ user_home }}/faucet"

    - name: Copy the config.js file
      become: true
      template:
        src: "{{ playbook_dir }}/templates/faucet-config.j2"
        dest: "{{ user_home }}/faucet/config.js"
      vars:
        lb1_ip: "{{ lb1 }}"  

    - name: Install express using npm
      become: true
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" &&
        export PATH="{{ user_home }}/.nvm/versions/node/v18.19.0/bin:$PATH" &&
        npm install express

    - name: Run yarn
      become: true
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" && export PATH="{{ ansible_env.PATH }}:{{ user_home }}/.nvm/versions/node/v18.19.0/bin" && cd '{{ user_home }}/faucet' && yarn

    - name: Copy the service file
      become: true
      template:
        src: "{{ playbook_dir }}/templates/faucet-service.j2"
        dest: "/etc/systemd/system/faucet.service"
        owner: root
        group: root
        mode: "0644"

    - name: Start the service file
      become: true
      systemd:
        name: faucet
        state: started
        enabled: yes

    - name: sleep for a few seconds
      command: sleep 10

    - name: Copy the mnemonic from the mnemonic.txt file
      become: true
      shell: cat mnemonic.txt
      args:
        chdir: "{{ user_home }}/faucet/.faucet"
      register: faucet_mnemonic

    - name: update the mnemonic field in config.js
      become: true
      lineinfile:
        path: "{{ user_home }}/faucet/config.js"
        regexp: '^\s*mnemonic:\s*"([^"]*)"'
        line: 'mnemonic: "{{ faucet_mnemonic.stdout }}",'

    - name: Add the faucet address to the keyring
      become: true
      shell: "echo '{{ faucet_mnemonic.stdout }}' | {{ daemon }} keys add faucet{{ item }} --recover --keyring-backend test"
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"
      loop: "{{ range(0, fullnode_count) | list }}"
      when: "inventory_hostname == groups['fullnodes'][item]"    
      become_user: "{{ ansible_user }}"
      become_method: sudo

    - name: listing all the keys in keyring
      shell: "{{ daemon }} keys list --keyring-backend test"
      register: list_key
      environment:
        PATH: "{{ path }}"

    - name: Debug the keyring output
      debug:
        var: list_key.stdout_lines

    - name: Debug the user dir
      debug:
        msg: "User Directory: {{ user_home }}"

    - name: Retrieve the faucet addresses for all validators
      become: true
      shell: "{{ daemon }} keys show -a faucet{{ item }} --keyring-backend test"
      register: faucet_addr_results
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"
      loop: "{{ range(0, fullnode_count) | list }}"
      when: inventory_hostname == groups['fullnodes'][item]

    - name: Debug the faucet_addr_results
      debug:
        var: faucet_addr_results  

    - name: Store faucet addresses in a dictionary
      set_fact:
        faucet_addresses: "{{ faucet_addresses | default({}) | combine({item: (faucet_addr_results.results[item].stdout if 'stdout' in faucet_addr_results.results[item] else 'skipped') }) }}"
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Debug the faucet addresses
      debug:
        var: faucet_addresses  
    
    - name: Transfer funds from genesis account to the faucet account
      shell: "{{ daemon }} tx bank send {{ fullnode_key }}{{ item }} {{ faucet_addr_results.results[item].stdout }} 10000000000{{ denom }} --keyring-backend test --chain-id {{ chain_id }} -y"
      environment:
        PATH: "{{ path }}"
      loop: "{{ range(0, fullnode_count) | list }}"
      when: inventory_hostname == groups['fullnodes'][item]

    - name: Create load balancer for the explorer and faucet
      community.digitalocean.digital_ocean_load_balancer:
        api_token: "{{ digital_ocean_api_token }}"
        state: present
        name: explorer-loadbalancer
        region: "{{ region }}"
        forwarding_rules:
          - entry_protocol: http
            entry_port: 80
            target_protocol: http
            target_port: 80

          - entry_protocol: http
            entry_port: 83
            target_protocol: http
            target_port: 83      
        droplet_ids: "{{ hostvars['localhost']['droplet_ids'] }}"
        health_check:
          protocol: "http"         
          port: 83            
          path: "/"           
          check_interval_seconds: 10
          response_timeout_seconds: 5
          healthy_threshold: 5
          unhealthy_threshold: 3
      when: inventory_hostname == "fullnode0" 

- name: Remove the files from playbook_dir
  hosts: localhost
  tasks:      
    - name: Remove binary.tar.gz files of each full node
      file:
        path: "{{ playbook_dir }}/{{ node_home }}f{{ item }}.tar.gz"
        state: absent
      loop: "{{ range(0, fullnode_count) | list }}"

    - name: Remove binary.tar.gz files of each validator 
      file:
        path: "{{ playbook_dir }}/{{ node_home }}{{ item }}.tar.gz"
        state: absent
      loop: "{{ range(1, validators_count) | list }}"  

    - name: Remove the genesis.json from the playbook_dir
      file: 
        path: "{{ playbook_dir }}/genesis.json"
        state: absent  

    - name: Remove the persistant peers.txt from the playbook_dir
      file: 
        path: "{{ playbook_dir }}/persistent_peers.txt"
        state: absent 



    
   


  
    

  

   
          



















  

    

    

   




            

   

