---
- name: Create new Droplets
  hosts: localhost
  vars:
    droplets_to_create: 3
    digital_ocean_api_token: "dop_v1_a5a3866c01f6faefb851db7b9d4bfd54dfee8d9f996b37720cf6759fc7071931"
    ssh_key_name: "Ritvik"
  tasks:
    - name: Get DigitalOcean SSH Key ID
      uri:
        url: "https://api.digitalocean.com/v2/account/keys"
        method: GET
        headers:
          Authorization: "Bearer {{ digital_ocean_api_token }}"
        return_content: yes
      register: ssh_key_response

    - name: Debug SSH Key Response
      debug:
        var: ssh_key_response

    - name: Parse SSH Key ID
      set_fact:
        ssh_key_id: "{{ (ssh_key_response.json | json_query(query)) | first }}"
      vars:
        query: "ssh_keys[?name=='{{ ssh_key_name }}'].id"

   

    - name: Read file contents
      slurp:
        src: "{{ ssh_file_path }}"
      register: ssh_content   

    - name: Store SSH key contents into a variable
      set_fact:
        ssh_key_variable: "{{ ssh_content['content'] | b64decode }}"     

    - name: Create new Droplet
      digital_ocean_droplet:
        state: present
        name: "test{{ item }}"
        size: s-2vcpu-4gb
        image: ubuntu-22-04-x64
        region: blr1
        ssh_keys: "{{ ssh_key_id }}"
        monitoring: false
        ipv6: false
        user_data: |
          #cloud-config
          users:
            - name: {{ user }}
              groups: sudo
              sudo: "ALL=(ALL) NOPASSWD:ALL"
              shell: /bin/bash
              ssh-authorized-keys:
                - {{ ssh_key_variable  }}
        api_token: "{{ digital_ocean_api_token }}"
      with_sequence: start=1 end={{ droplets_to_create }}
      register: do

    - name: Extract IP addresses
      set_fact:
        ip_addresses: "{{ do.results | json_query('[].data.droplet.networks.v4[0].ip_address') | flatten }}"

    - name: Set IP addresses as separate Ansible variables
      set_fact:
        validator1_ip: "{{ ip_addresses[0] }}"
        validator2_ip: "{{ ip_addresses[1] }}"
        validator3_ip: "{{ ip_addresses[2] }}"

    - name: Debug separate IP addresses
      debug:
        msg:
          - "Validator 1 IP: {{ validator1_ip }}"
          - "Validator 2 IP: {{ validator2_ip }}"
          - "Validator 3 IP: {{ validator3_ip }}"

    - name: Add validator1 to host group
      add_host:
        name: "validator_1"
        ansible_host: "{{ validator1_ip }}"
        validator2_ip: "{{ ip_addresses[1] }}"
        validator3_ip: "{{ ip_addresses[2] }}"

        ansible_user: "{{ user }}"

    - name: Add validator2 to host group
      add_host:
        name: "validator_2"
        ansible_host: "{{ validator2_ip }}"
        validator1_ip: "{{ ip_addresses[0] }}"
        validator3_ip: "{{ ip_addresses[2] }}"
        ansible_user: "{{ user }}"

    - name: Add validator3 to host group
      add_host:
        name: "validator_3"
        ansible_host: "{{ validator3_ip }}"
        validator2_ip: "{{ ip_addresses[1] }}"
        validator1_ip: "{{ ip_addresses[0] }}"
        ansible_user: "{{ user }}"

    - name: sleep for a few seconds
      command: sleep 15

    - name: Disable host key checking
      set_fact:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Update validator_1 IP in inventory file
      lineinfile:
        path: ./inventory.ini
        line: "validator_1 ansible_host={{ validator1_ip }} ansible_user={{ user }}"
        insertafter: '^\[hosting\]'

    - name: Update validator_2 IP in inventory file
      lineinfile:
        path: ./inventory.ini
        line: "validator_2 ansible_host={{ validator2_ip }} ansible_user={{ user }}"
        insertafter: '^\[hosting\]'

    - name: Update validator_3 IP in inventory file
      lineinfile:
        path: ./inventory.ini
        line: "validator_3 ansible_host={{ validator3_ip }} ansible_user={{ user }}"
        insertafter: '^\[hosting\]'

####################################################################################################################################
- name: Golang installation
  hosts: validator_1,validator_2,validator_3
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  tasks:
    - name: Debug the user dir
      debug:
        msg: "User Directory: {{ user_home }}"

    - name: Download go tar file
      command: wget https://go.dev/dl/go{{go_version}}.linux-amd64.tar.gz
      become: true

    - name: Delete previous installation
      command: rm -rf /usr/local/go
      become: true

    - name: Extract and move new go folder to /usr/local
      command: tar -C /usr/local -xzf go{{go_version}}.linux-amd64.tar.gz
      become: true

    - name: Delete downloaded tar file
      shell: rm -rf go{{go_version}}.linux-amd64.tar.gz*
      become: true

    - name: Set Go environment variables in ~/.profile
      lineinfile:
        path: ~/.profile
        line: |
          export GOROOT=/usr/local/go 
          export GOPATH={{ user_home }}/go
          export GOBIN=$GOPATH/bin
          export PATH=$PATH:/usr/local/go/bin:$GOBIN
        create: true
        state: present

    - name: sleep for a few seconds
      command: sleep 15

    - name: Update apt package list
      become: true
      apt:
        update_cache: yes

    - name: sleep for a few seconds
      command: sleep 30

    - name: Install prerequisites
      become: true
      apt:
        name:
          - make
          - jq
          - gcc
        state: present

- name: Run the commands
  hosts: validator_1
  tasks:
    - name: Debug the  dir
      debug:
        msg: "User Directory: {{ user_home }}"

    - name: Install the binary
      become: true
      block:
        - name: Clone the git repo
          git:
            repo: "{{ repo }}"
            dest: "{{ user_home }}/{{ network }}"
            version: "{{ node_version }}"
            update: yes
            force: yes

        - name: Install node
          command: "make install"
          args:
            chdir: "{{ user_home }}/{{ network }}"
          environment:
            PATH: "{{ path }}"
            GOPATH: "{{ user_home }}/go"

    - name: Initialize the chain2
      command: "{{ daemon }} init {{ validator_2_name }} --chain-id {{ chain_id }} --home {{ user_home }}/{{ node_home }}2"
      environment:
        PATH: "{{ path }}"

    - name: Add Keys2
      command: "{{ daemon }} keys add {{ validator_2_key }} --keyring-backend test --home {{ user_home }}/{{ node_home }}2"
      environment:
        PATH: "{{ path }}"

    - name: Add genesis account 2
      command: "{{ daemon }} genesis add-genesis-account {{ validator_2_key }}  100000000000{{ denom }} --keyring-backend test --home {{ user_home }}/{{ node_home }}2"
      environment:
        PATH: "{{ path }}"

    - name: Gentx Command 2
      command: "{{ daemon }} genesis  gentx {{ validator_2_key }} 90000000000{{ denom }} --chain-id {{ chain_id }} --keyring-backend test --home {{ user_home }}/{{ node_home }}2"
      environment:
        PATH: "{{ path }}"

    - name: Update minimum gas price on validator_2
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}2/config/app.toml"
        regexp: "^minimum-gas-prices ="
        line: 'minimum-gas-prices = "{{ minimum_gas_price }}"'
        state: present
      when: minimum_gas_price is defined

    - name: Retrieve the validator_2 address
      become: true
      shell: "{{ daemon }} keys show -a {{ validator_2_key }} --keyring-backend test --home {{ user_home }}/{{ node_home }}2"
      register: sub1_addr
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"

    - name: Initialize the chain3
      command: "{{ daemon }} init {{ validator_3_name }} --chain-id {{ chain_id }} --home {{ user_home }}/{{ node_home }}3"
      environment:
        PATH: "{{ path }}"

    - name: Add Keys3
      command: "{{ daemon }} keys add {{ validator_3_key }} --keyring-backend test --home {{ user_home }}/{{ node_home }}3"
      environment:
        PATH: "{{ path }}"

    - name: Add genesis account 3
      command: "{{ daemon }} genesis add-genesis-account {{ validator_3_key }}  100000000000{{ denom }} --keyring-backend test --home {{ user_home }}/{{ node_home }}3"
      environment:
        PATH: "{{ path }}"

    - name: Gentx Command 3
      command: "{{ daemon }} genesis  gentx {{ validator_3_key }} 90000000000{{ denom }} --chain-id {{ chain_id }} --keyring-backend test --home {{ user_home }}/{{ node_home }}3"
      environment:
        PATH: "{{ path }}"

    - name: Retrieve the validator_3 address
      become: true
      shell: "{{ daemon }} keys show -a {{ validator_3_key }} --keyring-backend test --home {{ user_home }}/{{ node_home }}3"
      register: sub2_addr
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"

    - name: Update minimum gas price on validator_3
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}3/config/app.toml"
        regexp: "^minimum-gas-prices ="
        line: 'minimum-gas-prices = "{{ minimum_gas_price }}"'
        state: present
      when: minimum_gas_price is defined

    - name: Initialize the main chain
      command: "{{ daemon }} init {{ validator_1_name }} --chain-id {{ chain_id }} --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"

    - name: Change denom to the required denom
      become: true
      shell: sed -i $SED_EXT 's/"stake"/"{{ denom }}"/' {{ user_home }}/{{ node_home }}/config/genesis.json

    - name: Replace voting_period value
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}/config/genesis.json"
        regexp: '^(\s*)"voting_period":\s*".*?",'
        line: '"voting_period": "{{ voting_period }}",'

    - name: Replace expediated voting_period value
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}/config/genesis.json"
        regexp: '^(\s*)"expedited_voting_period":\s*".*?",'
        line: '"expedited_voting_period": "{{ expedited_voting_period }}",'

    - name: Update "amount" value in the JSON file
      become: true
      shell: |
        jq '.app_state.gov.params.min_deposit[0].amount = "{{ min_deposit_value }}"' {{ user_home }}/{{ node_home }}/config/genesis.json > temp.json && mv temp.json {{ user_home }}/{{ node_home }}/config/genesis.json

    - name: Add Keys1
      command: "{{ daemon }} keys add {{ validator_1_key }} --keyring-backend test --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"

    - name: Add genesis account 1
      become: true
      command: "{{ daemon }} genesis add-genesis-account {{ validator_1_key }}  100000000000{{ denom }} --keyring-backend test --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"

    - name: Debug sub1 addr
      debug:
        var: sub1_addr.stdout

    - name: Debug sub2 addr
      debug:
        var: sub2_addr.stdout

    - name: Add genesis account 2 on simapp1
      become: true
      command: "{{ daemon }} genesis add-genesis-account {{ sub1_addr.stdout }}  100000000000{{ denom }} --keyring-backend test"
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"

    - name: Add genesis account 3 on simapp1
      become: true
      command: "{{ daemon }} genesis add-genesis-account {{ sub2_addr.stdout }}  100000000000{{ denom }} --keyring-backend test"
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"

    - name: Gentx Command 1
      become: true
      command: "{{ daemon }} genesis  gentx {{ validator_1_key }} 90000000000{{ denom }} --chain-id {{ chain_id }} --keyring-backend test --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"

    - name: Copy validator 2 gentx file into the validator 1 gentx folder
      become: true
      shell: "sudo cp {{ user_home }}/{{ node_home }}2/config/gentx/* {{ user_home }}/{{ node_home }}/config/gentx"

    - name: Copy validator 3 gentx file into the validator 1 gentx folder
      become: true
      shell: "sudo cp {{ user_home }}/{{ node_home }}3/config/gentx/* {{ user_home }}/{{ node_home }}/config/gentx"

    - name: Update minimum gas price on validator_1
      become: true
      lineinfile:
        path: "{{ user_home }}/{{ node_home }}/config/app.toml"
        regexp: "^minimum-gas-prices ="
        line: 'minimum-gas-prices = "{{ minimum_gas_price }}"'
        state: present
      when: minimum_gas_price is defined

    - name: Collect gentxs
      become: true
      command: "{{ daemon }} genesis  collect-gentxs --home {{ user_home }}/{{ node_home }}"
      environment:
        PATH: "{{ path }}"

    - name: Setup cosmovisor for validator_1
      become: true
      shell: "go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest &&  mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin && mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/upgrades && cp $GOPATH/bin/{{ daemon }} {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin/{{ daemon }}"
      environment:
        GOPATH: "{{ user_home }}/go"
        PATH: "{{ path }}"

    - name: Change ownership of cosmovisor directory
      become: true
      command: "chown -R {{ ansible_user }}:{{ ansible_user }} {{ user_home }}/{{ node_home }}/cosmovisor"

    - name: Compress simapp2 directory
      become: true
      archive:
        path: "{{ user_home }}/{{ node_home }}2"
        dest: "{{ user_home }}/simapp2.tar.gz"

    - name: Fetch simapp2 for validator_2
      become: true
      fetch:
        src: "{{ user_home }}/simapp2.tar.gz"
        dest: "{{ playbook_dir }}/simapp2.tar.gz"
        flat: yes

    - name: Compress simapp3 directory
      become: true
      archive:
        path: "{{ user_home }}/{{ node_home }}3"
        dest: "{{ user_home }}/simapp3.tar.gz"

    - name: Fetch simapp3 for validator_3
      become: true
      fetch:
        src: "{{ user_home }}/simapp3.tar.gz"
        dest: "{{ playbook_dir }}/simapp3.tar.gz"
        flat: yes

- name: Copy simapp2 on validator_2
  hosts: validator_2
  tasks:
    - name: Send the simapp2 to validator_2 server
      copy:
        src: "{{ playbook_dir }}/simapp2.tar.gz"
        dest: "{{ user_home }}/simapp2.tar.gz"

    - name: Unarchive the simapp2.gz file
      become: true
      unarchive:
        src: "{{ user_home }}/simapp2.tar.gz"
        dest: "{{ user_home }}"
        remote_src: yes

- name: Copy simapp3 on validator_3
  hosts: validator_3
  tasks:
    - name: Send the simapp3 to validator_3 server
      copy:
        src: "{{ playbook_dir }}/simapp3.tar.gz"
        dest: "{{ user_home }}/simapp3.tar.gz"

    - name: Unarchive the simapp3.gz file
      become: true
      unarchive:
        src: "{{ user_home }}/simapp3.tar.gz"
        dest: "{{ user_home }}"
        remote_src: yes

- name: extract and replace the genesis
  hosts: validator_1
  tasks:
    - name: Fetch genesis.json from
      become: true
      fetch:
        src: "{{ node_home }}/config/genesis.json"
        dest: "{{ playbook_dir }}/genesis.json"
        flat: yes

    - name: Debug the ansible user
      debug:
        msg: "Ansible User: {{ ansible_user }}"

    - name: Debug the user dir
      debug:
        msg: "User Directory: {{ user_home }}"

    - name: Extract node-id for validator_1
      become: true
      command: "{{ daemon }} tendermint show-node-id"
      register: m_node_id
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"

- name: Changing the existing sub genesis.json to the actual genesis.json
  hosts: validator_2
  tasks:
    - name: Replace the existing genesis.json
      become: true
      copy:
        src: "{{ playbook_dir }}/genesis.json"
        dest: "{{ user_home }}/{{ node_home }}2/config/genesis.json"

- name: Changing the existing sub genesis.json to the actual genesis.json
  hosts: validator_3
  tasks:
    - name: Replace the existing genesis.json
      become: true
      copy:
        src: "{{ playbook_dir }}/genesis.json"
        dest: "{{ user_home }}/{{ node_home }}3/config/genesis.json"

- name: Install prerequisites on validator_2,validator_3
  hosts: validator_2,validator_3
  tasks:
    - name: Debug the user dir
      debug:
        msg: "User Directory: {{ user_home }}"

    - name: Install the binary
      become: true
      block:
        - name: Clone the git repo
          git:
            repo: "{{ repo }}"
            dest: "{{ user_home }}/{{ network }}"
            version: "{{ node_version }}"
            update: yes
            force: yes

        - name: Install node
          become: true
          command: "make install"
          args:
            chdir: "{{ user_home }}/{{ network }}"
          environment:
            PATH: "{{ path }}"
            GOPATH: "{{ user_home }}/go"
          when: binary is undefined

- name: Replace dir on validator_2
  hosts: validator_2
  tasks:
    - name: Remove the existing simapp and rename simapp2 to simapp
      become: true
      shell: "rm -rf {{ node_home }} && mv {{ node_home }}2 {{ node_home }}"

    - name: Setup cosmovisor for validator_2
      become: true
      shell: "go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest &&  mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin && mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/upgrades && cp $GOPATH/bin/{{ daemon }} {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin/{{ daemon }}"
      environment:
        GOPATH: "{{ user_home }}/go"
        PATH: "{{ path }}"

    - name: Change ownership of cosmovisor directory
      become: true
      command: "chown -R {{ ansible_user }}:{{ ansible_user }} {{ user_home }}/{{ node_home }}/cosmovisor"

    - name: Extract node-id for validator_2
      become: true
      shell: "{{ daemon }} tendermint show-node-id"
      register: s1_node_id
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"

- name: Replace dir on validator_3
  hosts: validator_3
  tasks:
    - name: Remove the existing simapp and rename simapp3 to simapp
      become: true
      shell: "rm -rf {{ node_home }} && mv {{ node_home }}3 {{ node_home }}"

    - name: Setup cosmovisor for validator_3
      become: true
      shell: go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest &&  mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin && mkdir -p {{ user_home }}/{{ node_home }}/cosmovisor/upgrades && cp $GOPATH/bin/{{ daemon }} {{ user_home }}/{{ node_home }}/cosmovisor/genesis/bin/{{ daemon }}
      environment:
        GOPATH: "{{ user_home }}/go"
        PATH: "{{ path }}"

    - name: Change ownership of cosmovisor directory
      become: true
      command: "chown -R {{ ansible_user }}:{{ ansible_user }} {{ user_home }}/{{ node_home }}/cosmovisor"

    - name: Extract node-id for validator_3
      become: true
      shell: "{{ daemon }} tendermint show-node-id"
      register: s2_node_id
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"

- name: Add persistent peer
  hosts: validator_1
  tasks:
    - name: Add persistant  peer for validator_1 node
      become: true
      lineinfile:
        path: "{{ node_home }}/config/config.toml"
        regexp: "^persistent_peers ="
        line: 'persistent_peers = "{{ hostvars["validator_2"]["s1_node_id"]["stdout"] }}@{{ validator2_ip }}:26656,{{ hostvars["validator_3"]["s2_node_id"]["stdout"] }}@{{ validator3_ip }}:26656"'

- name: Add persistent peer
  hosts: validator_2
  tasks:
    - name: Add persistant  peer for validator_2 node
      become: true
      lineinfile:
        path: "{{ node_home }}/config/config.toml"
        regexp: "^persistent_peers ="
        line: 'persistent_peers = "{{ hostvars["validator_1"]["m_node_id"]["stdout"] }}@{{ validator1_ip }}:26656,{{ hostvars["validator_3"]["s2_node_id"]["stdout"] }}@{{ validator3_ip }}:26656"'

- name: Add persistent peer
  hosts: validator_3
  tasks:
    - name: Add persistant  peer for validator_3 node
      become: true
      lineinfile:
        path: "{{ node_home }}/config/config.toml"
        regexp: "^persistent_peers ="
        line: 'persistent_peers = "{{ hostvars["validator_1"]["m_node_id"]["stdout"] }}@{{ validator1_ip }}:26656,{{ hostvars["validator_2"]["s1_node_id"]["stdout"] }}@{{ validator2_ip }}:26656"'

- name: Copy the node service file and start it
  hosts: validator_1,validator_2,validator_3
  tasks:
    - name: Copy the service file
      become: true
      template:
        src: "{{ playbook_dir }}/templates/node-service.j2"
        dest: "/etc/systemd/system/{{ network }}.service"
        owner: root
        group: root
        mode: "0644"

    - name: Start the service file
      become: true
      systemd:
        name: "{{ network }}"
        state: started
        enabled: yes

    - name: Restart the journald service file
      become: true
      shell: systemctl restart systemd-journald.service

- name: Install dependencies
  hosts: validator_1
  tasks:
    - name: Install nvm
      shell: >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash &&
        export NVM_DIR="{{ user_home }}/.nvm" &&
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" &&
        [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
      args:
        executable: /bin/bash

    - name: Install Node.js
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" &&
        nvm install v18.19.0
      environment:
        NVM_DIR: "{{ user_home }}/.nvm"
        PATH: "{{ user_home }}/.nvm/versions/node/v18.19.0/bin:{{ ansible_env.PATH }}"
      become: yes

    - name: Update global PATH
      lineinfile:
        path: /etc/environment
        line: 'PATH="{{ user_home }}/.nvm/versions/node/v18.19.0/bin:{{ ansible_env.PATH }}"'
      become: yes

    - name: Install npm
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" &&
        nvm install-latest-npm
      environment:
        NVM_DIR: "{{ user_home }}/.nvm"
        PATH: "{{ user_home }}/.nvm/versions/node/v18.19.0/bin:{{ ansible_env.PATH }}"

    - name: Install yarn
      become: true
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" &&
        npm install --global --unsafe-perm=true yarn
      environment:
        NVM_DIR: "{{ user_home }}/.nvm"
        PATH: "{{ user_home }}/.nvm/versions/node/v18.19.0/bin:{{ ansible_env.PATH }}"

    - name: Install ping_explorer
      become: true
      git:
        repo: "{{ ping_repo }}"
        dest: "{{ user_home }}/explorer"
        version: "f35fb4485630a6d80a9246f29e753e9e75fefbd3"

    - name: Make required changes in app and config.toml
      block:
        - name: Make rpc publicly accessible
          become: true
          lineinfile:
            path: "{{ user_home }}/{{ node_home }}/config/config.toml"
            regexp: 'laddr = "tcp://127.0.0.1:26657"'
            line: 'laddr = "tcp://0.0.0.0:26657"'

        - name: Making the change in the CORS section of config.toml
          become: true
          lineinfile:
            path: "{{ user_home }}/{{ node_home }}/config/config.toml"
            regexp: 'cors_allowed_origins = \[\]'
            line: 'cors_allowed_origins = ["*"]'

        - name: Making the change in the CORS section of app.toml
          become: true
          lineinfile:
            path: "{{ user_home }}/{{ node_home }}/config/app.toml"
            regexp: "enabled-unsafe-cors = false"
            line: "enabled-unsafe-cors = true"

        - name: set enable to true under api section
          become: true
          replace:
            path: "{{ user_home }}/{{ node_home }}/config/app.toml"
            regexp: '(?ms)(\[api\][^\[]*enable\s*=\s*)false'
            replace: '\1true'

        - name: replace localhost under api section
          become: true
          replace:
            path: "{{ user_home }}/{{ node_home }}/config/app.toml"
            regexp: 'address = "tcp://localhost:1317"'
            replace: 'address = "tcp://0.0.0.0:1317"'

        - name: Restart the systemd file of the node
          become: true
          shell: systemctl restart {{ network }}.service

        - name: Install nginx
          become: true
          shell: sudo apt install -y nginx

        - name: move into the mainnet and remove the other files
          shell: rm -rf *
          args:
            chdir: "{{ user_home }}/explorer/chains/mainnet"
          become: yes

        - name: Copy the sample json file
          become: true
          template:
            src: "{{ playbook_dir }}/templates/explorer-config.j2"
            dest: "{{ user_home }}/explorer/chains/mainnet/{{ chain_id }}.json"

        - name: Remove contents of /var/www/html
          become: true
          shell: rm -rf *
          args:
            chdir: "/var/www/html/"

        - name: Debug PATH
          ansible.builtin.debug:
            var: ansible_env.PATH

        - name: Build the explorer
          become: true
          shell: >
            . "{{ user_home }}/.nvm/nvm.sh" && export PATH="{{ ansible_env.PATH }}:{{ user_home }}/.nvm/versions/node/v18.19.0/bin" && cd '{{ user_home }}/explorer' && yarn install --ignore-engines && yarn build
          args:
            chdir: "{{ user_home }}/explorer"

        - name: Move the data inside dist folder to /var/www/html
          become: true
          shell: cp -r dist/* /var/www/html/
          args:
            chdir: "{{ user_home }}/explorer"

        - name: Restart the journald service file
          become: true
          shell: systemctl restart systemd-journald.service

- name: Faucet related tasks
  hosts: validator_1
  tasks:
    - name: Install the faucet
      become: true
      shell: git clone https://github.com/vitwit/ping-faucet.git faucet && cd faucet && git checkout multi-chains
      args:
        chdir: "{{ user_home }}"

    - name: Remove existing config.js file
      become: true
      shell: rm -f config.js
      args:
        chdir: "{{ user_home }}/faucet"

    - name: Copy the config.js file
      become: true
      template:
        src: "{{ playbook_dir }}/templates/faucet-config.j2"
        dest: "{{ user_home }}/faucet/config.js"

    - name: Install express using npm
      become: true
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" &&
        export PATH="{{ user_home }}/.nvm/versions/node/v18.19.0/bin:$PATH" &&
        npm install express

    - name: Run yarn
      become: true
      shell: >
        . "{{ user_home }}/.nvm/nvm.sh" && export PATH="{{ ansible_env.PATH }}:{{ user_home }}/.nvm/versions/node/v18.19.0/bin" && cd '{{ user_home }}/faucet' && yarn

    - name: Copy the service file
      become: true
      template:
        src: "{{ playbook_dir }}/templates/faucet-service.j2"
        dest: "/etc/systemd/system/faucet.service"
        owner: root
        group: root
        mode: "0644"

    - name: Start the service file
      become: true
      systemd:
        name: faucet
        state: started
        enabled: yes

    - name: sleep for a few seconds
      command: sleep 10

    - name: Copy the mnemonic from the mnemonic.txt file
      become: true
      shell: cat mnemonic.txt
      args:
        chdir: "{{ user_home }}/faucet/.faucet"
      register: faucet_mnemonic

    - name: update the mnemonic field in config.js
      become: true
      lineinfile:
        path: "{{ user_home }}/faucet/config.js"
        regexp: '^\s*mnemonic:\s*"([^"]*)"'
        line: 'mnemonic: "{{ faucet_mnemonic.stdout }}",'

    - name: Add the faucet address to the keyring
      become: true
      shell: "echo '{{ faucet_mnemonic.stdout }}' | {{ daemon }} keys add faucet --recover --keyring-backend test"
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"
      become_user: "{{ ansible_user }}"
      become_method: sudo

    - name: listing all the keys in keyring
      shell: "{{ daemon }} keys list --keyring-backend test"
      register: list_key
      environment:
        PATH: "{{ path }}"

    - name: Debug te keyring output
      debug:
        var: list_key.stdout_lines

    - name: Debug the user dir
      debug:
        msg: "User Directory: {{ user_home }}"

    - name: Retrieve the faucet address
      become: true
      shell: "{{ daemon }} keys show -a faucet --keyring-backend test"
      register: faucet_addr
      environment:
        PATH: "{{ path }}"
        HOME: "{{ user_home }}"

    - name: Transfer funds from genesis account to the faucet account
      shell: "{{ daemon }} tx bank send {{ validator_1_key }} {{ faucet_addr.stdout }}  10000000000{{ denom }} --keyring-backend test --chain-id {{ chain_id }} -y"
      environment:
        PATH: "{{ path }}"
