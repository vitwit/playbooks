# ---
# - name: Create new Droplets
#   hosts: localhost
#   vars:
#     droplets_to_create: 1
#     digital_token: "dop_v1_a5a3866c01f6faefb851db7b9d4bfd54dfee8d9f996b37720cf6759fc7071931"
#     ssh_key_name: "Ritvik"
#   tasks:
#     - name: Get DigitalOcean SSH Key ID
#       uri:
#         url: "https://api.digitalocean.com/v2/account/keys"
#         method: GET
#         headers:
#           Authorization: "Bearer {{ digital_token }}"
#         return_content: yes
#       register: ssh_key_response

#     - name: Debug SSH Key Response
#       debug:
#         var: ssh_key_response

#     - name: Parse SSH Key ID
#       set_fact:
#         ssh_key_id: "{{ (ssh_key_response.json | json_query(query)) | first }}"
#       vars:
#         query: "ssh_keys[?name=='{{ ssh_key_name }}'].id"

   

#     - name: Read file contents
#       slurp:
#         src: "{{ ssh_file_path }}"
#       register: ssh_content   

#     - name: Store SSH key contents into a variable
#       set_fact:
#         ssh_key_variable: "{{ ssh_content['content'] | b64decode }}"     

#     - name: Create new Droplet
#       digital_ocean_droplet:
#         state: present
#         name: "test{{ item }}"
#         size: s-2vcpu-4gb
#         image: ubuntu-22-04-x64
#         region: blr1
#         ssh_keys: "{{ ssh_key_id }}"
#         monitoring: false
#         ipv6: false
#         user_data: |
#           #cloud-config
#           users:
#             - name: {{ user }}
#               groups: sudo
#               sudo: "ALL=(ALL) NOPASSWD:ALL"
#               shell: /bin/bash
#               ssh-authorized-keys:
#                 - {{ ssh_key_variable  }}
#         api_token: "{{ digital_token }}"
#       with_sequence: start=1 end={{ droplets_to_create }}
#       register: do

#     - name: Extract IP addresses
#       set_fact:
#         ip_addresses: "{{ do.results | json_query('[].data.droplet.networks.v4[0].ip_address') | flatten }}"
#         droplet_ids: "{{ do.results | json_query('[].data.droplet.id') | flatten }}"


#     - name: Set IP addresses as separate Ansible variables
#       set_fact:
#         validator1_ip: "{{ ip_addresses[0] }}"
#         validator1_id: "{{ droplet_ids[0] }}" 
     
#     - name: Add validator1 to host group
#       add_host:
#         name: "validator_1"
#         ansible_host: "{{ validator1_ip }}"
   
#     - name: sleep for a few seconds
#       command: sleep 15

#     - name: Disable host key checking
#       set_fact:
#         ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

#     - name: Update validator_1 IP in inventory file
#       lineinfile:
#         path: ./inventory.ini
#         line: "validator_1 ansible_host={{ validator1_ip }} ansible_user={{ user }}"
#         insertafter: '^\[hosting\]'
#     - name: Debug
#       debug:
#          var: "{{validator1_id }}"

#     - name: Create load balancer
#       community.digitalocean.digital_ocean_load_balancer:
#         api_token: "{{ digital_token }}"
#         state: present
#         name: example-load-balancer
#         region: blr1
#         forwarding_rules:
#           - entry_protocol: http
#             entry_port: 80
#             target_protocol: http
#             target_port: 80
#           - entry_protocol: https
#             entry_port: 443
#             target_protocol: https
#             target_port: 443
#             tls_passthrough: true
#         droplet_ids:
#           - "{{ validator1_id }}"
#         redirect_http_to_https: true  
        




########################################################################################################################


---
- name: Create new Droplets
  hosts: localhost
  vars:
    droplets_to_create: 1
    # digital_token: "dop_v1_a5a3866c01f6faefb851db7b9d4bfd54dfee8d9f996b37720cf6759fc7071931"
    # ssh_key_name: "Ritvik"
  tasks:
    - name: Get DigitalOcean SSH Key ID
      uri:
        url: "https://api.digitalocean.com/v2/account/keys"
        method: GET
        headers:
          Authorization: "Bearer {{ digital_token }}"
        return_content: yes
      register: ssh_key_response

    - name: Parse SSH Key ID
      set_fact:
        ssh_key_id: "{{ (ssh_key_response.json | json_query(query)) | first }}"
      vars:
        query: "ssh_keys[?name=='{{ ssh_key_name }}'].id"

    - name: Read file contents
      slurp:
        src: "{{ ssh_file_path }}"
      register: ssh_content   

    - name: Store SSH key contents into a variable
      set_fact:
        ssh_key_variable: "{{ ssh_content['content'] | b64decode }}"     

    - name: Create new Droplet
      digital_ocean_droplet:
        state: present
        name: "test{{ item }}"
        size: s-2vcpu-4gb
        image: ubuntu-22-04-x64
        region: blr1
        ssh_keys: "{{ ssh_key_id }}"
        monitoring: false
        ipv6: false
        user_data: |
          #cloud-config
          users:
            - name: {{ user }}
              groups: sudo
              sudo: "ALL=(ALL) NOPASSWD:ALL"
              shell: /bin/bash
              ssh-authorized-keys:
                - {{ ssh_key_variable }}
        api_token: "{{ digital_token }}"
      with_sequence: start=1 end={{ droplets_to_create }}
      register: do

    - name: Extract IP addresses
      set_fact:
        ip_addresses: "{{ do.results | json_query('[].data.droplet.networks.v4[0].ip_address') | flatten }}"
        droplet_ids: "{{ do.results | json_query('[].data.droplet.id') | flatten }}"

    - name: Set IP addresses as separate Ansible variables
      set_fact:
        validator1_ip: "{{ ip_addresses[0] }}"
        validator1_id: "{{ droplet_ids[0] }}" 
     
    - name: Add validator1 to host group
      add_host:
        name: "validator_1"
        ansible_host: "{{ validator1_ip }}"
   
    - name: sleep for a few seconds
      command: sleep 15

    - name: Disable host key checking
      set_fact:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Update validator_1 IP in inventory file
      lineinfile:
        path: ./inventory.ini
        line: "validator_1 ansible_host={{ validator1_ip }} ansible_user={{ user }}"
        insertafter: '^\[hosting\]'

    - name: Create load balancer
      community.digitalocean.digital_ocean_load_balancer:
        api_token: "{{ digital_ocean_api_token }}"
        state: present
        name: example-load-balancer
        region: blr1
        forwarding_rules:
          - entry_protocol: http
            entry_port: 80
            target_protocol: http
            target_port: 26657
        droplet_ids:
          - "{{ droplet_ids }}"
        redirect_http_to_https: true

        ###########################################################################################################################
















    

    - name: Create load balancer
      community.digitalocean.digital_ocean_load_balancer:
        api_token: "{{ digital_token }}"
        state: present
        name: example-load-balancer
        region: blr1
        forwarding_rules:
          - entry_protocol: http
            entry_port: 80
            target_protocol: http
            target_port: 26657  # Forwarding RPC port to load balancer port 80
          - entry_protocol: https
            entry_port: 443
            target_protocol: https
            target_port: 443
            tls_passthrough: true
        droplet_ids: 
        redirect_http_to_https: true

